plugins {
    id "java"
    id "idea"
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)
    id "flowinquiry.docker-conventions"
    id "jacoco"
}

description = ""

ext {
    springProfiles = ""
}



if (project.hasProperty("prod")) {
    apply from: "../../../gradle/profile_prod.gradle"
} else {
    apply from: "../../../gradle/profile_dev.gradle"
}

defaultTasks "bootRun"

springBoot {
    mainClass = "io.flowinquiry.FlowInquiryApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx512m'
    reports.html.required = false
    testLogging.exceptionFormat "full"
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(test)
}

task integrationTestReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(integrationTest)
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.11"
}

// Configure JaCoCo for the test task
test {
    jacoco {
        destinationFile = file("${buildDir}/jacoco/test.exec")
    }
    finalizedBy jacocoTestReport
}

// Configure JaCoCo for the integrationTest task
// This is defined in profile_dev.gradle
tasks.register('jacocoIntegrationTestReport', JacocoReport) {
    dependsOn integrationTest

    executionData.from = files("${buildDir}/jacoco/integrationTest.exec")

    sourceDirectories.from = files(
        project.sourceSets.main.java.srcDirs,
        project(":apps:backend:commons").sourceSets.main.java.srcDirs
    )

    classDirectories.from = files(
        project.sourceSets.main.output.classesDirs,
        project(":apps:backend:commons").sourceSets.main.output.classesDirs
    )

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    finalizedBy jacocoCombinedReport
}

// Configure the main JaCoCo report task to include both test and integrationTest data
jacocoTestReport {
    dependsOn test

    sourceDirectories.from = files(
        project.sourceSets.main.java.srcDirs,
        project(":apps:backend:commons").sourceSets.main.java.srcDirs
    )

    classDirectories.from = files(
        project.sourceSets.main.output.classesDirs,
        project(":apps:backend:commons").sourceSets.main.output.classesDirs
    )

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

// Add a task to generate a combined report for both test and integrationTest
tasks.register('jacocoCombinedReport', JacocoReport) {
    description = 'Generates an aggregate JaCoCo report from both unit tests and integration tests'
    group = 'Verification'

    // Create a directory to store copies of the execution data files
    def jacocoMergeDir = "${buildDir}/jacoco/merge"
    doFirst {
        // Create the directory if it doesn't exist
        file(jacocoMergeDir).mkdirs()

        // Copy the test.exec file if it exists
        def testExec = file("${buildDir}/jacoco/test.exec")
        if (testExec.exists()) {
            copy {
                from testExec
                into jacocoMergeDir
            }
        }

        // Copy the integrationTest.exec file if it exists
        def integrationTestExec = file("${buildDir}/jacoco/integrationTest.exec")
        if (integrationTestExec.exists()) {
            copy {
                from integrationTestExec
                into jacocoMergeDir
            }
        }
    }

    // Only include execution data files from the merge directory
    executionData.setFrom(fileTree(jacocoMergeDir).include("*.exec"))

    sourceDirectories.from = files(
        project.sourceSets.main.java.srcDirs,
        project(":apps:backend:commons").sourceSets.main.java.srcDirs
    )

    classDirectories.from = files(
        project.sourceSets.main.output.classesDirs,
        project(":apps:backend:commons").sourceSets.main.output.classesDirs
    )

    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

// Make the check task depend on the jacocoCombinedReport task
check.dependsOn jacocoCombinedReport

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

dependencies {
    implementation( project(":apps:backend:commons"))

    testImplementation(libs.greenmail.junit5)
    testImplementation("org.testcontainers:jdbc")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.boot:spring-boot-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation(libs.assertJ)
    testImplementation(libs.testcontainers.spring)
    testImplementation(libs.testcontainers.postgresql)
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
