plugins {
    id "java"
    id "idea"
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)
    id "flowinquiry.docker-conventions"
}

description = ""

ext {
    springProfiles = ""
}



if (project.hasProperty("prod")) {
    apply from: "../../../gradle/profile_prod.gradle"
} else {
    apply from: "../../../gradle/profile_dev.gradle"
}

defaultTasks "bootRun"

springBoot {
    mainClass = "io.flowinquiry.FlowInquiryApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx512m'
    reports.html.required = false
    testLogging.exceptionFormat "full"
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(test)
}

task integrationTestReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(integrationTest)
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

dependencies {
    implementation( project(":apps:backend:commons"))

    testImplementation(libs.greenmail.junit5)
    testImplementation("org.testcontainers:jdbc")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.boot:spring-boot-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation(libs.assertJ)
    testImplementation(libs.testcontainers.spring)
    testImplementation(libs.testcontainers.postgresql)
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
