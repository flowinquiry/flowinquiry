plugins {
    id "java"
    id "maven-publish"
    id "idea"
    id "com.gorylenko.gradle-git-properties"
    alias(libs.plugins.spring.boot)
    alias(libs.plugins.spring.dependency.management)
    id "flexwork.spring-cache-conventions"
    id "flexwork.docker-conventions"
    id "flexwork.code-conventions"
    id "org.jetbrains.kotlin.jvm"
}

version = "0.0.1-SNAPSHOT"

description = ""

assert System.properties["java.specification.version"] == "17" || "18" || "19" || "20" || "21" || "22"

ext {
    springProfiles = ""
    if (project.hasProperty("tls")) {
        springProfiles += ",tls"
    }
    if (project.hasProperty("e2e")) {
        springProfiles += ",e2e"
    }
}



if (project.hasProperty("prod")) {
    apply from: "../gradle/profile_prod.gradle"
} else {
    apply from: "../gradle/profile_dev.gradle"
}


idea {
    module {
        excludeDirs += files("node_modules")
    }
}

defaultTasks "bootRun"

springBoot {
    mainClass = "io.flexwork.FlexworkApp"
}

test {
    useJUnitPlatform()
    exclude "**/*IT*", "**/*IntTest*"
    testLogging {
        events 'FAILED', 'SKIPPED'
    }
    jvmArgs += '-Djava.security.egd=file:/dev/./urandom -Xmx512m'
    reports.html.required = false
    testLogging.exceptionFormat "full"
}

check.dependsOn integrationTest
task testReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(test)
}

task integrationTestReport(type: TestReport) {
    destinationDirectory = file("$buildDir/reports/tests")
    testResults.from(integrationTest)
}

configurations {
    providedRuntime
    implementation.exclude module: "spring-boot-starter-tomcat"
}

dependencies {
    api project(":tools:liquibase")
    api project(":tools:platform")

    compileOnly(libs.lombok)

    implementation("com.fasterxml.jackson.module:jackson-module-jaxb-annotations")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-hppc")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-hibernate6")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310")
    implementation("com.github.ben-manes.caffeine:caffeine")
    implementation("com.zaxxer:HikariCP")
    implementation(libs.dot.env)
    implementation(libs.j2html)
    implementation(libs.bundles.json)

    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation(libs.jhipster.framework)
    implementation("org.apache.commons:commons-lang3")
    implementation(libs.jclouds) {
        exclude group: "com.sun.xml.bind"
    }
    implementation("org.springframework.boot:spring-boot-loader-tools")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-logging")
    implementation("org.springframework.boot:spring-boot-starter-mail")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-thymeleaf")
    implementation("org.springframework.boot:spring-boot-starter-undertow")
    modules {
        module("org.springframework.boot:spring-boot-starter-tomcat") {
            replacedBy("org.springframework.boot:spring-boot-starter-undertow", "Use Undertow instead of Tomcat")
        }
    }
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.security:spring-security-data")

    implementation("org.hibernate.orm:hibernate-core")
    implementation("org.hibernate.validator:hibernate-validator")
    implementation(libs.bundles.spring.statemachine)
    implementation(libs.liquibase)

//    testImplementation("com.tngtech.archunit:archunit-junit5-api:${archunitJunit5Version}") {
//        exclude group: "org.slf4j", module: "slf4j-api"
//    }
//    testRuntimeOnly("com.tngtech.archunit:archunit-junit5-engine:${archunitJunit5Version}") {
//        exclude group: "org.slf4j", module: "slf4j-api"
//    }
    testImplementation("org.testcontainers:jdbc")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:testcontainers")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.boot:spring-boot-test")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation(libs.spring.statemachine.test)
    testCompileOnly(libs.lombok)
    testAnnotationProcessor(libs.lombok)
    testImplementation("org.jetbrains.kotlin:kotlin-test")
    testImplementation(libs.assertJ)

    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.hibernate.orm:hibernate-jpamodelgen")
    annotationProcessor("org.glassfish.jaxb:jaxb-runtime")
    annotationProcessor(libs.lombok)
    // Keep mapstruct dependency below the lombok
    implementation(libs.mapstruct)
    annotationProcessor(libs.mapstruct.processor)
}

task cleanResources(type: Delete) {
    delete "build/resources"
}

compileJava.dependsOn processResources
processResources.dependsOn bootBuildInfo
